{
  "_args": [
    [
      {
        "raw": "@material/slider@^0.1.1",
        "scope": "@material",
        "escapedName": "@material%2fslider",
        "name": "@material/slider",
        "rawSpec": "^0.1.1",
        "spec": ">=0.1.1 <0.2.0",
        "type": "range"
      },
      "/home/mjw/matthewjwolff.github.io/node_modules/material-components-web"
    ]
  ],
  "_from": "@material/slider@>=0.1.1 <0.2.0",
  "_id": "@material/slider@0.1.1",
  "_inCache": true,
  "_location": "/@material/slider",
  "_nodeVersion": "6.9.2",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/slider-0.1.1.tgz_1498493463886_0.9452153698075563"
  },
  "_npmUser": {
    "name": "amsheehan",
    "email": "alex.m.sheehan@gmail.com"
  },
  "_npmVersion": "3.10.9",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@material/slider@^0.1.1",
    "scope": "@material",
    "escapedName": "@material%2fslider",
    "name": "@material/slider",
    "rawSpec": "^0.1.1",
    "spec": ">=0.1.1 <0.2.0",
    "type": "range"
  },
  "_requiredBy": [
    "/material-components-web"
  ],
  "_resolved": "https://registry.npmjs.org/@material/slider/-/slider-0.1.1.tgz",
  "_shasum": "d46bb1c80a9534892ccec9fa098e151b69886023",
  "_shrinkwrap": null,
  "_spec": "@material/slider@^0.1.1",
  "_where": "/home/mjw/matthewjwolff.github.io/node_modules/material-components-web",
  "bugs": {
    "url": "https://github.com/material-components/material-components-web/issues"
  },
  "dependencies": {
    "@material/animation": "^0.2.2",
    "@material/base": "^0.2.1",
    "@material/rtl": "^0.1.6",
    "@material/theme": "^0.1.5"
  },
  "description": "The Material Components for the web slider component",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "d46bb1c80a9534892ccec9fa098e151b69886023",
    "tarball": "https://registry.npmjs.org/@material/slider/-/slider-0.1.1.tgz"
  },
  "homepage": "https://github.com/material-components/material-components-web#readme",
  "keywords": [
    "material components",
    "material design",
    "slider"
  ],
  "license": "Apache-2.0",
  "main": "index.js",
  "maintainers": [
    {
      "name": "acdvorak",
      "email": "acdvorak@gmail.com"
    },
    {
      "name": "lynnjepsen",
      "email": "lynnjepsen@google.com"
    },
    {
      "name": "bwobrien",
      "email": "obrien.test@gmail.com"
    },
    {
      "name": "yeelan0319",
      "email": "yiranmao@gmail.com"
    },
    {
      "name": "amsheehan",
      "email": "alex.m.sheehan@gmail.com"
    },
    {
      "name": "cristobalchao",
      "email": "cchao87@gmail.com"
    },
    {
      "name": "traviskaufman",
      "email": "travis.kaufman@gmail.com"
    },
    {
      "name": "sgomes",
      "email": "mail@sgomes.io"
    },
    {
      "name": "material-admin",
      "email": "lynnjepsen+npm@google.com"
    }
  ],
  "name": "@material/slider",
  "optionalDependencies": {},
  "publishConfig": {
    "access": "public"
  },
  "readme": "<!--docs:\ntitle: \"Sliders\"\nlayout: detail\nsection: components\niconId: slider\npath: /catalog/input-controls/sliders/\n-->\n\n# Slider\n\n<!--<div class=\"article__asset\">\n  <a class=\"article__asset-link\"\n     href=\"https://material-components-web.appspot.com/slider.html\">\n    <img src=\"{{ site.rootpath }}/images/mdc_web_screenshots/sliders.png\" width=\"400\" alt=\"Select screenshot\">\n  </a>\n</div>-->\n\n> **Status**:\n> - [x] Continuous Sliders\n> - [ ] Discrete Sliders\n\nMDC Slider provides an implementation of the Material Design slider component. It is modeled after\nthe browser's `<input type=\"range\">` element. Sliders are fully RTL-aware, and conform to the\nWAI-ARIA [slider authoring practices](https://www.w3.org/TR/wai-aria-practices-1.1/#slider).\n\nNote that **vertical sliders and range (multi-thumb) sliders are not supported, due to their absence\nfrom the material design spec**.\n\nAlso note that we have taken certain deviations from the UX within the spec, e.g. nuances as to the\nslider's motion across the track, as well as the style of the slider thumb when in the \"off\" state\nin dark mode. Thus, there may be some treatments which deviate from the mocks. These deviations\narose out of design feedback from seeing sliders used on the web, and thus have been endorsed by\nthe Material Design team.\n\n## Design and API Documentation\n\n<ul class=\"icon-list\">\n  <li class=\"icon-list-item icon-list-item--spec\">\n    <a href=\"https://material.io/guidelines/components/sliders.html\">Material Design guidelines: Sliders</a>\n  </li>\n</ul>\n\n## Installation\n\n```\nnpm i --save @material/slider\n```\n\n## Usage\n\n```html\n<div class=\"mdc-slider\" tabindex=\"0\" role=\"slider\"\n     aria-valuemin=\"0\" aria-valuemax=\"100\" aria-valuenow=\"0\"\n     aria-label=\"Select Value\">\n  <div class=\"mdc-slider__track-container\">\n    <div class=\"mdc-slider__track\"></div>\n  </div>\n  <div class=\"mdc-slider__thumb-container\">\n    <svg class=\"mdc-slider__thumb\" width=\"21\" height=\"21\">\n      <circle cx=\"10.5\" cy=\"10.5\" r=\"7.875\"></circle>\n    </svg>\n    <div class=\"mdc-slider__focus-ring\"></div>\n  </div>\n</div>\n```\n\nThen in JS\n\n```js\nimport {MDCSlider} from '@material/slider';\n\nconst slider = new MDCSlider(document.querySelector('.mdc-slider'));\nslider.listen('MDCSlider:change', () => console.log(`Value changed to ${slider.value}`));\n```\n\nYou can also include MDCSlider via its UMD version located at `dist/mdc.slider[.min].js`\n\n```js\n// CommonJS\nconst {MDCSlider} = require('@material/slider/dist/mdc.slider');\n\n// AMD\nrequire(['/path/to/@material/slider/dist/mdc.slider'], ({MDCSlider}) => {\n  // Use MDCSlider\n});\n\n// Global\nconst {MDCSlider} = mdc.slider;\n```\n\n### Initializing the slider with custom ranges/values\n\nWhen `MDCSlider` is initialized, it reads the element's `aria-valuemin`, `aria-valuemax`, and\n`aria-valuenow` values if present and uses them to set the component's `min`, `max`, and `value`\nproperties. This means you can use these attributes to set these values for the slider within the\nDOM.\n\n```html\n<div class=\"mdc-slider\" tabindex=\"0\" role=\"slider\"\n     aria-valuemin=\"-5\" aria-valuemax=\"50\" aria-valuenow=\"10\"\n     aria-label=\"Select Value\">\n  <!-- ... -->\n</div>\n```\n\n### Using a step value\n\n> **NOTE**: If a slider contains a step value it does _not_ mean that the slider is a \"discrete\"\n> slider. \"Discrete slider\" is a UX treatment, while having a step value is behavioral.\n\n`MDCSlider` supports quantization by allowing users to supply a floating-point `step` value via a\n`data-step` attribute.\n\n```html\n<div class=\"mdc-slider\" tabindex=\"0\" role=\"slider\"\n     aria-valuemin=\"0\" aria-valuemax=\"100\" aria-valuenow=\"0\"\n     data-step=\"2\" aria-label=\"Select Value\">\n  <!-- ... -->\n</div>\n```\n\nWhen a step value is given, the slider will quantize all values to match that step value, _except_\nfor the minimum and maximum values, which can always be set. This is to ensure consistent behavior.\n\nThe step value can be any positive floating-point number, or `0`. When the step value is `0`, the\nslider is considered to not have any step.\n\n### Disabled sliders\n\nAdding an `aria-disabled` attribute to a slider will initially disable it.\n\n```html\n<div class=\"mdc-slider\" tabindex=\"0\" role=\"slider\"\n     aria-valuemin=\"0\" aria-valuemax=\"100\" aria-valuenow=\"0\"\n     aria-label=\"Select Value\" aria-disabled=\"true\">\n  <!-- ... -->\n</div>\n```\n\n### MDC Slider Component API\n\nThe `MDCSlider` API is modeled after the `<input type=\"range\">` element and supports a subset of the\nproperties that element supports. It also emits events equivalent to a range input's `input` and\n`change` events.\n\n#### Properties\n\n| Property Name | Type | Description |\n| --- | --- | --- |\n| `value` | `number` | The current value of the slider. Changing this will update the slider's value. |\n| `min` | `number` | The minimum value a slider can have. Values set programmatically will be clamped to this minimum value. Changing this property will update the slider's value if it is lower than the new minimum |\n| `max` | `number` | The maximum value a slider can have. Values set programmatically will be clamped to this maximum value. Changing this property will update the slider's value if it is greater than the new maximum |\n| `step` | `number` | Specifies the increments at which a slider value can be set. Can be any positive number, or `0` for no step. Changing this property will update the slider's value to be quantized along the new step increments |\n| `disabled` | `boolean` | Whether or not the slider is disabled |\n\n#### Methods\n\n| Method Signature | Description |\n| --- | --- |\n| `layout() => void` | Recomputes the dimensions and re-lays out the component. This should be called if the dimensions of the slider itself or any of its parent elements change programmatically (it is called automatically on resize). |\n| `stepUp(amount = 1) => void` | Increases the slider value by the given `amount`, or `1` if no amount is given |\n| `stepDown(amount = 1) => void` | Increases the slider value by the given `amount`, or `1` if no amount is given |\n\n#### Events\n\n`MDCSlider` emits a `MDCSlider:input` custom event from its root element whenever the slider value\nis changed by way of a user event, e.g. when a user is dragging the slider or changing the value\nusing the arrow keys. The `detail` property of the event is set to the slider instance that was\naffected.\n\n`MDCSlider` emits a `MDCSlider:change` custom event from its root element whenever the slider value\nis changed _and committed_ by way of a user event, e.g. when a user stops dragging the slider or\nchanges the value using the arrow keys. The `detail` property of the event is set to the slider\ninstance that was affected.\n\n### Using the foundation class\n\nThe `@material/slider` package ships with an `MDCSliderFoundation` class that framework authors can\nuse to build a custom MDCSlider component for their framework.\n\n#### Adapter API\n\n| Method Signature | Description |\n| --- | --- |\n| `addClass(className: string) => void` | Adds a class `className` to the root element |\n| `removeClass(className: string) => void` | Removes a class `className` from the root element |\n| `getAttribute(name: string) => string?` | Returns the value of the attribute `name` on the root element, or `null` if that attribute is not present on the root element. |\n| `setAttribute(name: string, value: string) => void` | Sets an attribute `name` to the value `value` on the root element. |\n| `removeAttribute(name: string) => void` | Removes an attribute `name` from the root element |\n| `computeBoundingRect() => ClientRect` | Computes and returns the bounding client rect for the root element. Our implementations calls `getBoundingClientRect()`` for this. |\n| `getTabIndex() => number` | Returns the value of the `tabIndex` property on the root element |\n| `registerInteractionHandler(type: string, handler: EventListener) => void` | Adds an event listener `handler` for event type `type` to the slider's root element |\n| `deregisterInteractionHandler(type: string, handler: EventListener) => void` | Removes an event listener `handler` for event type `type` from the slider's root element |\n| `registerThumbContainerInteractionHandler(type: string, handler: EventListener) => void` | Adds an event listener `handler` for event type `type` to the slider's thumb container element |\n| `deregisterThumbContainerInteractionHandler(type: string, handler: EventListener) => void` | Removes an event listener `handler` for event type `type` from the slider's thumb container element |\n| `registerBodyInteractionHandler(type: string, handler: EventListener) => void` | Adds an event listener `handler` for event type `type` to the `<body>` element of the slider's document |\n| `deregisterBodyInteractionHandler(type: string, handler: EventListener) => void` | Removes an event listener `handler` for event type `type` from the `<body>` element of the slider's document |\n| `registerResizeHandler(handler: EventListener) => void` | Adds an event listener `handler` that is called when the component's viewport resizes, e.g. `window.onresize`. |\n| `deregisterResizeHandler(handler: EventListener) => void` | Removes an event listener `handler` that was attached via `registerResizeHandler` |\n| `notifyInput() => void` | Broadcasts an \"input\" event notifying clients that the slider's value is currently being changed. The implementation should choose to pass along any relevant information pertaining to this event. In our case we pass along the instance of the component for which the event is triggered for. |\n| `notifyChange() => void` | Broadcasts a \"change\" event notifying clients that a change to the slider's value has been committed by the user. Similar guidance applies here as for `notifyInput()`. |\n| `setThumbContainerStyleProperty(propertyName: string, value: string) => void` | Sets a dash-cased style property `propertyName` to the given `value` on the thumb container element. |\n| `setTrackStyleProperty(propertyName: string, value: string) => void` | Sets a dash-cased style property `propertyName` to the given `value` on the track element |\n| `isRTL() => boolean` | True if the slider is within an RTL context, false otherwise. |\n\n#### MDCSliderFoundation API\n\n| Method Signature | Description |\n| --- | --- |\n| `layout() => void` | Same as layout() detailed within the component methods table. Does the majority of the work; the component's layout method simply proxies to this. |\n| `getValue() => number` | Returns the current value of the slider |\n| `setValue(value: number) => void` | Sets the current value of the slider |\n| `getMax() => number` | Returns the max value the slider can have |\n| `setMax(max: number) => void` | Sets the max value the slider can have |\n| `getMin() => number` | Returns the min value the slider can have |\n| `setMin(min: number) => number` | Sets the min value the slider can have |\n| `getStep() => number` | Returns the step value of the slider |\n| `setStep(step: number) => void` | Sets the step value of the slider |\n| `isDisabled() => boolean` | Returns whether or not the slider is disabled |\n| `setDisabled(disabled: boolean) => void` | Disables the slider when given true, enables it otherwise. |\n\n### Theming\n\nAll thematic elements of sliders make use of the **primary theme color**, including when the\ncomponent is used within a dark mode context.\n\n#### Setting the correct background color for disabled/off slider thumbs\n\nOne tricky issue with sliders is how the thumb is supposed to look when in the disabled or\n\"off\" states. In these cases, certain portions of the slider's thumb and track are supposed to\nbecome \"transparent\" and reveal the background color behind it. However, this presents a problem as\nthere is no elegant way to derive what the background color behind the slider should be. We could\ntheoretically walk up the DOM until we found an ancestor with a set background, but that would break\nthe component's encapsulation model.\n\nTo solve this, you can supply a css custom property `--mdc-slider-bg-color-behind-component`. When\nused, this will override the default colors used for the disabled/off state slider thumb and use\nthe color specified:\n\n```css\n.container {\n  background: #fafafa;\n}\n\n.container > .mdc-slider {\n  --mdc-slider-bg-color-behind-component: #fafafa;\n}\n```\n\nIf you need to accomplish this in a browser which does not support custom properties (IE11 and\nolder versions of Edge), you can override the Sass variables `$mdc-slider-default-assumed-bg-color`.\n\n```scss\n$mdc-slider-default-assumed-bg-color: #fafafa;\n\n@import \"@material/slider/mdc-slider\";\n```\n\nIf you're using the `.mdc-theme--dark` classes, you'll want to override `$mdc-slider-dark-theme-assumed-bg-color` instead.\n\nFinally, if you'd prefer not to use Sass, you can use the following CSS snippet which should be\nincluded _after_ the `@material/slider` styles have been loaded onto the page:\n\n```css\n.mdc-slider--off .mdc-slider__thumb {\n  fill: YOUR_CUSTOM_COLOR;\n}\n\n.mdc-slider--disabled .mdc-slider__thumb {\n  stroke: YOUR_CUSTOM_COLOR !important;\n}\n```\n\nNote that the following snippet assumes you are not using `mdc-theme--dark`. If you are, you may\nneed to add `.mdc-theme--dark` as an additional ancestor selector before the `.mdc-slider--*`\nclasses.\n\n### Tips/Tricks\n\n#### Preventing [FOUC](https://en.wikipedia.org/wiki/Flash_of_unstyled_content)\n\nBecause `MDCSlider` updates its UI based on the values it reads in when it is instantiated, there is\npotential for an incorrect first render before the script containing the `MDCSlider` initialization\nlogic executes. To avoid this, there are a few things you can attempt to do:\n\nIf the slider's `aria-valuenow` is set to `\"0\"`, you can manually add the class `mdc-slider--off`\nto the root `mdc-slider` element.\n\nIf you know how wide the slider will be at the time of instantiation, you can add an inline style\nto the `mdc-slider__thumb-container`/`mdc-slider__track` elements which will position it correctly\nby using similar logic to that within our code:\n\n1. Figure out the the percentage of length the thumb should have traveled across the track by\n   computing `(value - min) / (max - min)`. We'll call this `pctComplete`.\n1. Compute the amount the slider thumb container by multiplying the width of the slider element by\n   `pctComplete`. We'll call this `translatePx`. Note that if you're using the slider in an RTL\n   content, modify `translatePx` such that `translatePx = <width of the slider element> -\n   translatePx`.\n1. Set the `transform` style on `mdc-slider__thumb-container` to `translateX(${translatePx}px)\n   translateX(-50%)`.\n1. Set the `transform` style on `mdc-slider__track` to `scale(pctComplete)`.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/material-components/material-components-web.git"
  },
  "scripts": {},
  "version": "0.1.1"
}
